/**
 * This file is © 2014 Mesosphere, Inc. (“Mesosphere”). Mesosphere
 * licenses this file to you solely pursuant to the following terms
 * (and you may not use this file except in compliance with such
 * terms):
 *
 * 1) Subject to your compliance with the following terms, Mesosphere
 * hereby grants you a nonexclusive, limited, personal,
 * non-sublicensable, non-transferable, royalty-free license to use
 * this file solely for your internal business purposes.
 *
 * 2) You may not (and agree not to, and not to authorize or enable
 * others to), directly or indirectly:
 *   (a) copy, distribute, rent, lease, timeshare, operate a service
 *   bureau, or otherwise use for the benefit of a third party, this
 *   file; or
 *
 *   (b) remove any proprietary notices from this file.  Except as
 *   expressly set forth herein, as between you and Mesosphere,
 *   Mesosphere retains all right, title and interest in and to this
 *   file.
 *
 * 3) Unless required by applicable law or otherwise agreed to in
 * writing, Mesosphere provides this file on an "AS IS" BASIS, WITHOUT
 * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied,
 * including, without limitation, any warranties or conditions of
 * TITLE, NON-INFRINGEMENT, MERCHANTABILITY, or FITNESS FOR A
 * PARTICULAR PURPOSE.
 *
 * 4) In no event and under no legal theory, whether in tort (including
 * negligence), contract, or otherwise, unless required by applicable
 * law (such as deliberate and grossly negligent acts) or agreed to in
 * writing, shall Mesosphere be liable to you for damages, including
 * any direct, indirect, special, incidental, or consequential damages
 * of any character arising as a result of these terms or out of the
 * use or inability to use this file (including but not limited to
 * damages for loss of goodwill, work stoppage, computer failure or
 * malfunction, or any and all other commercial damages or losses),
 * even if Mesosphere has been advised of the possibility of such
 * damages.
 */

package mesos.modules.overlay.internal;

import "include/overlay/overlay.proto";


// Message used by the Agent to register with the overlay-master.
message RegisterAgentMessage {
  required AgentNetworkConfig network_config = 1;
}


// Message used by the Master to inform the Agent about configured
// overlay networks.
message UpdateAgentOverlaysMessage {
  repeated AgentOverlayInfo overlays = 1;
}


// Message used by the Agent to inform the Master that it has received
// the configuration and has tried to configure all the networks. The
// message informs the Master about the status of the networks on the
// Agent.
message AgentRegisteredMessage {
  repeated AgentOverlayInfo overlays = 1;
}


// Used by the Master to inform the Agent that it has received the
// updated network state.
message AgentRegisteredAcknowledgement {
}


// Used by Agent to intimate the master if it needs subnets allocated
// for overlays, and given a subnet if it needs to configure
// the Mesos and Docker bridges for the overlays.
//
// NOTE: This is useful when the Agent module just needs to configure
// the VTEP IP and VTEP MAC, and act as a gateway to all the overlays,
// and doesn't need to host containers on the overlay. An example
// use-case would be when the Agent module is run on the Master. This
// setup would give access to components running on the Master to
// directly talk to containers on the overlay.
message AgentNetworkConfig {
  optional bool allocate_subnet = 1 [default = true];
  optional bool mesos_bridge = 2 [default = true];  
  optional bool docker_bridge = 3 [default = true];
}


// Used by Agent to store the configuration specified by the operator.
message AgentConfig {
  required string master = 1;
  required string cni_dir = 2;
  optional AgentNetworkConfig network_config = 3;
}


// Used by the Master to determine the zookeeper config required for
// leader election by the replicated log.
message ZookeeperConfig {
  required string url = 1;
  required uint32 quorum = 2;
  optional uint32 session_timeout = 3 [default = 10];
}


// Used by the Master to store the configuration specified by the
// operator.
message MasterConfig {
  optional ZookeeperConfig zk = 1;
  optional string replicated_log_dir = 2;
  required NetworkConfig network = 3;
}
